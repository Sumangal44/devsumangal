---
import Layout from "@/layouts/Layout.astro";
import Buttoncard from "@/components/Button";
import ProjectCard from "@/components/ProjectCard";
import SocialIcons from "@/components/SocialIcons";
import { projects } from "@/data/projects";
import Services from "@/components/services.astro";
import Contact from "@/components/contact.astro";
// Image for the hero section
const img = "https://avatars.githubusercontent.com/u/200762829?v=4";
---

<Layout title="DevSujata - Home">
  <div class="container px-4 md:px-6">
    <!-- Hero Section -->
    <section
      class="flex flex-col-reverse md:flex-row items-center justify-between gap-8 py-10 md:py-16"
    >
      <!-- Left content -->
      <div class="flex flex-col gap-4 max-w-xl text-center md:text-left">
        <h1
          class="text-3xl md:text-4xl lg:text-5xl font-bold leading-tight tracking-tight"
        >
          Welcome to My Portfolio
        </h1>
        <p class="text-lg md:text-xl text-muted-foreground">
          I build amazing web experiences
        </p>
        <p class="text-base sm:text-lg text-muted-foreground">
          I'm a passionate developer creating responsive and user-friendly web
          applications that solve real-world problems.
        </p>

        <!-- Buttons -->
        <div
          class="flex flex-col sm:flex-row justify-center md:justify-start gap-4 mt-4 flex-wrap"
        >
          <Buttoncard tag="View Projects" link="/projects" vari="default" />
          <Buttoncard tag="Contact Me" link="/contact" vari="outline" />
          <!-- Modern Download Button -->
          <button
            id="downloadBtn"
            onclick="downloadWithProgress()"
            class="group relative inline-flex items-center justify-center rounded-lg border border-input bg-gradient-to-r from-primary to-primary/90 text-primary-foreground px-6 py-3 text-sm font-medium shadow-lg transition-all duration-500 hover:scale-105 hover:shadow-xl hover:from-primary/90 hover:to-primary focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 active:scale-95 overflow-hidden"
          >
            <!-- Shimmer Effect -->
            <div
              class="absolute inset-0 -translate-x-full bg-gradient-to-r from-transparent via-white/20 to-transparent group-hover:translate-x-full transition-transform duration-1000"
            >
            </div>

            <span
              id="downloadText"
              class="relative flex items-center gap-3 z-10 transition-all duration-300"
            >
              <!-- Download Icon -->
              <svg
                id="downloadIcon"
                class="w-5 h-5 transition-all duration-300 group-hover:animate-bounce"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M4 16v2a2 2 0 002 2h12a2 2 0 002-2v-2M12 12v6m0 0l-3-3m3 3l3-3"
                ></path>
              </svg>

              <!-- Loading Spinner (hidden by default) -->
              <svg
                id="loadingSpinner"
                class="w-5 h-5 animate-spin hidden"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  class="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"></circle>
                <path
                  class="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>

              <!-- Success Checkmark (hidden by default) -->
              <svg
                id="successIcon"
                class="w-5 h-5 hidden text-green-300"
                fill="none"
                stroke="currentColor"
                stroke-width="2.5"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  d="M5 13l4 4L19 7"></path>
              </svg>

              <span id="buttonText" class="font-medium">Download Resume</span>
            </span>

            <!-- Enhanced Progress Bar with Gradient -->
            <div
              id="progressContainer"
              class="absolute bottom-0 left-0 w-full h-1 bg-black/10 rounded-b-lg overflow-hidden"
            >
              <div
                id="progressBar"
                class="h-full bg-gradient-to-r from-emerald-400 via-cyan-400 to-blue-400 transition-all duration-300 relative overflow-hidden"
                style="width: 0%;"
              >
                <!-- Progress Glow Effect -->
                <div
                  class="absolute inset-0 bg-gradient-to-r from-transparent via-white/30 to-transparent animate-pulse"
                >
                </div>
              </div>
            </div>

            <!-- Percentage Display -->
            <div
              id="percentageDisplay"
              class="absolute -top-8 left-1/2 transform -translate-x-1/2 bg-black/80 text-white text-xs px-2 py-1 rounded opacity-0 transition-all duration-300 pointer-events-none"
            >
              <span id="percentageText">0%</span>
              <!-- Arrow pointing down -->
              <div
                class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-2 border-r-2 border-t-2 border-transparent border-t-black/80"
              >
              </div>
            </div>
          </button>
        </div>

        <div class="hidden md:block">
          <SocialIcons />
        </div>
      </div>

      <!-- Right image -->
      <div class="flex flex-col items-center w-full max-w-[400px]">
        <div
          class="w-[250px] sm:w-[300px] md:w-[350px] lg:w-[400px] aspect-square rounded-full overflow-hidden shadow-md"
        >
          <img
            src={img}
            alt="Developer portrait"
            class="w-full h-full object-cover"
            width="400"
            height="400"
          />
        </div>

        <!-- Social Media Icons -->
        <div class="block md:hidden mt-4">
          <SocialIcons />
        </div>
      </div>
    </section>

    <!-- Projects Section -->
    <section class="py-10 md:py-16">
      <h2
        class="text-2xl md:text-3xl font-bold tracking-tight mb-8 text-center md:text-center"
      >
        Featured Projects
      </h2>
      <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
        {
          projects.map((project) => (
            <ProjectCard
              title={project.title}
              description={project.description}
              image={project.image}
              link={project.link}
            />
          ))
        }
      </div>
    </section>
    <!-- ðŸ‘‡ New Services Section -->
    <Services />

    <!-- contact section -->
    <div class="container px-4 md:px-6 py-10 md:py-16">
      <Contact />
    </div>
  </div>
  <script is:inline>
    async function downloadWithProgress() {
      // Get all the elements
      const btn = document.getElementById("downloadBtn");
      const progressBar = document.getElementById("progressBar");
      const progressContainer = document.getElementById("progressContainer");
      const percentageDisplay = document.getElementById("percentageDisplay");
      const percentageText = document.getElementById("percentageText");
      const downloadIcon = document.getElementById("downloadIcon");
      const loadingSpinner = document.getElementById("loadingSpinner");
      const successIcon = document.getElementById("successIcon");
      const buttonText = document.getElementById("buttonText");

      // Disable button and start loading state
      btn.disabled = true;
      btn.classList.add("opacity-80", "pointer-events-none", "scale-95");

      // Show loading state
      downloadIcon.classList.add("hidden");
      loadingSpinner.classList.remove("hidden");
      buttonText.textContent = "Preparing Download...";

      // Show percentage display with animation
      percentageDisplay.classList.add("opacity-100", "scale-100");

      const url = "/sumangalkaran.pdf";

      try {
        // Add initial delay for better UX perception
        await new Promise((resolve) => setTimeout(resolve, 500));

        const response = await fetch(url);
        if (!response.ok) throw new Error("Download failed.");

        const contentLength = response.headers.get("content-length");
        const total = contentLength ? parseInt(contentLength, 10) : 0;
        let loaded = 0;

        const reader = response.body.getReader();
        const chunks = [];

        // Update button text for downloading state
        buttonText.textContent = "Downloading...";

        while (true) {
          const { done, value } = await reader.read();
          if (done) break;

          chunks.push(value);
          loaded += value.length;

          if (total) {
            const percent = Math.round((loaded / total) * 100);

            // Smooth progress animation
            requestAnimationFrame(() => {
              progressBar.style.width = `${percent}%`;
              percentageText.textContent = `${percent}%`;

              // Add glow effect as progress increases
              if (percent > 50) {
                progressBar.classList.add("shadow-lg", "shadow-cyan-500/50");
              }

              // Pulse effect near completion
              if (percent > 90) {
                progressBar.classList.add("animate-pulse");
              }
            });

            // Conditional delay for smoother animation
            if (total && total < 1_000_000) {
              // Apply delay for smaller files (< 1MB)
              await new Promise((resolve) => setTimeout(resolve, 20));
            }
          } else {
            // Indeterminate progress
            progressBar.style.width = "100%";
            progressBar.classList.add("animate-pulse");
            percentageText.textContent = "Loading...";
          }
        }

        // Create and trigger download
        const blob = new Blob(chunks);
        const link = document.createElement("a");
        link.href = URL.createObjectURL(blob);
        link.download = "sumangalkaran.pdf";
        link.click();
        URL.revokeObjectURL(link.href);

        // Success animation sequence
        progressBar.style.width = "100%";
        progressBar.classList.remove("animate-pulse");
        progressBar.classList.add(
          "bg-gradient-to-r",
          "from-green-400",
          "to-emerald-500"
        ); // Ensure these classes are safelisted in tailwind.config.js

        // Hide loading, show success
        loadingSpinner.classList.add("hidden");
        successIcon.classList.remove("hidden");
        successIcon.classList.add("animate-bounce");

        buttonText.textContent = "Downloaded Successfully!";
        percentageText.textContent = "Complete âœ“";

        // Success glow effect
        btn.classList.add("shadow-green-500/50", "shadow-lg");

        // Celebrate with a subtle scale animation
        btn.classList.remove("scale-95");
        btn.classList.add("scale-100");

        // Auto-reset after 3 seconds
        setTimeout(() => {
          resetButton();
        }, 3000);
      } catch (err) {
        console.error("Download error:", err);

        // Error state animation
        progressBar.style.backgroundColor = "#ef4444";
        progressBar.classList.add("animate-pulse");

        loadingSpinner.classList.add("hidden");
        downloadIcon.classList.remove("hidden");
        downloadIcon.classList.add("text-red-400");

        buttonText.textContent = "Download Failed";
        percentageText.textContent = "Error!";

        btn.classList.add("border-red-500", "bg-red-500/10");

        // Show error toast
        showErrorToast(err.message || "Download failed. Please try again.");

        // Reset after 3 seconds
        setTimeout(() => {
          resetButton();
        }, 3000);
      }

      function resetButton() {
        // Reset all states with smooth transitions
        btn.disabled = false;
        btn.classList.remove(
          "opacity-80",
          "pointer-events-none",
          "scale-95",
          "scale-100",
          "shadow-green-500/50",
          "shadow-lg",
          "border-red-500",
          "bg-red-500/10"
        );

        // Reset icons
        loadingSpinner.classList.add("hidden");
        successIcon.classList.add("hidden");
        successIcon.classList.remove("animate-bounce");
        downloadIcon.classList.remove("hidden", "text-red-400");

        // Reset progress
        progressBar.style.width = "0%";
        progressBar.style.backgroundColor = "";
        progressBar.classList.remove(
          "animate-pulse",
          "shadow-lg",
          "shadow-cyan-500/50",
          "bg-gradient-to-r",
          "from-green-400",
          "to-emerald-500"
        );

        // Reset text
        buttonText.textContent = "Download Resume";

        // Hide percentage display
        percentageDisplay.classList.remove("opacity-100", "scale-100");
        percentageText.textContent = "0%";
      }

      function showErrorToast(message) {
        // Create a modern error toast
        const toast = document.createElement("div");
        toast.className =
          "fixed top-4 right-4 bg-red-500 text-white px-6 py-3 rounded-lg shadow-lg z-50 transform translate-x-full transition-transform duration-300";
        toast.innerHTML = `
          <div class="flex items-center gap-2">
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
            </svg>
            <span>${message}</span>
          </div>
        `;

        document.body.appendChild(toast);

        // Animate in
        setTimeout(() => {
          toast.classList.remove("translate-x-full");
        }, 100);

        // Auto remove after 4 seconds
        setTimeout(() => {
          toast.classList.add("translate-x-full");
          setTimeout(() => {
            if (document.body.contains(toast)) {
              document.body.removeChild(toast);
            }
          }, 300);
        }, 4000);
      }
    }
  </script></Layout
>
